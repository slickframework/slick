{{ '<?php'|raw }}

/**
 * {{ command.getControllerSimpleName }}
 *
 * @package {{ command.getNamespace|raw }}
 * @author  Your Name {{ '<your.name@email.com>'|raw }}
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */

namespace {{ command.getNamespace }};

use {{ command.getModelName|raw }};
use Slick\Mvc\Model,
    Slick\Mvc\Controller,
    Slick\Filter\StaticFilter,
    Slick\Mvc\Libs\Utils\Pagination,
    Slick\Mvc\Libs\Session\FlashMessages;

/**
 * {{ command.getControllerSimpleName }} controller
 *
 * @package {{ command.getNamespace|raw }}
 * @author  Your Name {{ '<your.name@email.com>'|raw }}
 */
class {{ command.getControllerSimpleName  }} extends Controller
{

{% block body %}
    /**
     * Handles the request to display index page
     */
    public function index()
    {
        $pagination = new Pagination();
        $options = array();
        $pagination->setTotal({{ command.getModelSimpleName }}::count($options));
        $options['limit'] = $pagination->rowsPerPage;
        $options['page'] = $pagination->offset;
        ${{ command.getModelPlural }} = {{ command.getModelSimpleName }}::all($options);
        $this->set(compact('{{ command.getModelPlural }}', 'pagination'));
    }

    /**
     * Handles the request to display the show page
     *
     * @param int $id The model primary key value
     */
    public function show($id = 0)
    {
        ${{ command.getModelSingular }} = {{ command.getModelSimpleName }}::get($id);
        if (!${{ command.getModelSingular }}) {
            $this->setMessage(
                FlashMessages::TYPE_WARNING,
                $this->translate("The specified {{ command.getModelSingular }} does not exists.")
            );
            $this->redirect('{{ command.getModelPlural }}/index');
        }
        $this->set(compact('{{ command.getModelSingular }}'));
    }

    /**
     * Handles the request to add a new {{ command.getModelSingular }}
     */
    public function add()
    {

        $form = new Forms\{{ command.getFormName }}('add-{{ command.getModelSingular }}');

        if ($this->request->isPost()) {
            $form->setData($this->request->getPost());
            if ($form->isValid()) {
                ${{ command.getModelSingular }} = new {{ command.getModelSimpleName }}($form->getValues());
                try {
                    ${{ command.getModelSingular }}->save();
                    $this->setMessage(
                        FlashMessages::TYPE_SUCCESS,
                        $this->translate("{{ command.getModelSingular|capitalize }} successfully created.")
                    );
                    $this->redirect(
                        '{{ command.getModelPlural }}/show/'.
                        ${{ command.getModelSingular }}->getConnector()->getLastInsertId()
                    );
                } catch (\Exception $exp) {
                    $this->setMessage(
                        FlashMessages::TYPE_WARNING,
                        sprintf(
                            $this->translate("{{ command.getModelSingular|capitalize }} cannot be created. %s"),
                            $exp->getMessage()
                        )
                    );
                }
            } else {
                $this->setMessage(
                    FlashMessages::TYPE_ERROR,
                    $this->translate("{{ command.getModelSingular|capitalize }} cannot be created. Please check the errors below.")
                );
            }
        }
        $this->set(compact('form'));
    }

    /**
     * Handles the request to edit a {{ command.getModelSingular }}
     *
     * @param integer $id {{ command.getModelSingular|capitalize }} primary key value
     */
    public function edit($id = 0)
    {
        $form = new Forms\{{ command.getFormName }}('edit-{{ command.getModelSingular }}');

        if ($this->request->isPost()) {
            $form->setData($this->request->getPost());
            if ($form->isValid()) {
                ${{ command.getModelSingular }} = new {{ command.getModelSimpleName }}($form->getValues());
                try {
                    ${{ command.getModelSingular }}->save();
                    $this->setMessage(
                        FlashMessages::TYPE_SUCCESS,
                        $this->translate("{{ command.getModelSingular|capitalize }} successfully updated.")
                    );
                    $this->redirect("{{ command.getModelPlural }}/show/{$id}");
                } catch (\Exception $exp) {
                    $this->setMessage(
                        FlashMessages::TYPE_WARNING,
                        sprintf(
                            $this->translate("{{ command.getModelSingular|capitalize }} cannot be updated. %s"),
                            $exp->getMessage()
                        )
                    );
                }
            } else {
                $this->setMessage(
                    FlashMessages::TYPE_ERROR,
                    $this->translate("{{ command.getModelSingular|capitalize }} cannot be updated. Please check the errors below.")
                );
            }
        } else {
            /** @var Model ${{ command.getModelSingular }} */
            ${{ command.getModelSingular }} = {{ command.getModelSimpleName }}::get($id);
            $form->setData(${{ command.getModelSingular }}->getData());
        }

        $this->set(compact('{{ command.getModelSingular }}', 'form'));
    }

    /**
     * Handles the request to delete a record
     */
    public function delete()
    {
        if ($this->request->isPost()) {
            $id = StaticFilter::filter('text', $this->request->getPost('id'));
            ${{ command.getModelSingular }} = {{ command.getModelSimpleName }}::get($id);
            if (!${{ command.getModelSingular }}) {
                $this->setMessage(
                    FlashMessages::TYPE_WARNING,
                    $this->translate("The specified {{ command.getModelSingular }} does not exists.")
                );
            } else {
                if (${{ command.getModelSingular }}->delete()) {
                    $this->setMessage(
                        FlashMessages::TYPE_SUCCESS,
                        $this->translate("{{ command.getModelSingular|capitalize }} successfully deleted.")
                    );
                }
            }

        }
        $this->redirect('{{ command.getModelPlural }}/index');
    }

{% endblock %}
}